)]}'
{"version":3,"sources":["mizzao:user-status/monitor.coffee"],"names":[],"mappings":"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","file":"/packages/mizzao_user-status.js","sourcesContent":["###\n  The idle monitor watches for mouse, keyboard, and blur events,\n  and reports idle status to the server.\n\n  It uses TimeSync to report accurate time.\n\n  Everything is reactive, of course!\n###\n\n# State variables\nmonitorId = null\nidle = false\nlastActivityTime = undefined\n\nmonitorDep = new Deps.Dependency\nidleDep = new Deps.Dependency\nactivityDep = new Deps.Dependency\n\nfocused = true\n\n# These settings are internal or exported for test only\nMonitorInternals = {\n  idleThreshold: null\n  idleOnBlur: false\n\n  computeState: (lastActiveTime, currentTime, isWindowFocused) ->\n    inactiveTime = currentTime - lastActiveTime\n    return true if MonitorInternals.idleOnBlur and not isWindowFocused\n    return if (inactiveTime > MonitorInternals.idleThreshold) then true else false\n\n  connectionChange: (isConnected, wasConnected) ->\n    # We only need to do something if we reconnect and we are idle\n    # Don't get idle status reactively, as this function only\n    # takes care of reconnect status and doesn't care if it changes.\n\n    # Note that userId does not change during a resume login, as designed by Meteor.\n    # However, the idle state is tied to the connection and not the userId.\n    if isConnected and !wasConnected and idle\n      MonitorInternals.reportIdle(lastActivityTime)\n\n  onWindowBlur: ->\n    focused = false\n    monitor()\n\n  onWindowFocus: ->\n    focused = true\n    # Focusing should count as an action, otherwise \"active\" event may be\n    # triggered at some point in the past!\n    monitor(true)\n\n  reportIdle: (time) ->\n    Meteor.call \"user-status-idle\", time\n\n  reportActive: (time) ->\n    Meteor.call \"user-status-active\", time\n\n}\n\nstart = (settings) ->\n  throw new Error(\"Can't start idle monitor until synced to server\") unless TimeSync.isSynced()\n  throw new Error(\"Idle monitor is already active. Stop it first.\") if monitorId\n\n  settings = settings || {}\n\n  # The amount of time before a user is marked idle\n  MonitorInternals.idleThreshold = settings.threshold || 60000\n\n  # Don't check too quickly; it doesn't matter anyway: http://stackoverflow.com/q/15871942/586086\n  interval = Math.max(settings.interval || 1000, 1000)\n\n  # Whether blurring the window should immediately cause the user to go idle\n  MonitorInternals.idleOnBlur = if settings.idleOnBlur? then settings.idleOnBlur else false\n\n  # Set new monitoring interval\n  monitorId = Meteor.setInterval(monitor, interval)\n  monitorDep.changed()\n\n  # Reset last activity; can't count inactivity from some arbitrary time\n  unless lastActivityTime?\n    lastActivityTime = Deps.nonreactive -> TimeSync.serverTime()\n    activityDep.changed()\n\n  monitor()\n  return\n\nstop = ->\n  throw new Error(\"Idle monitor is not running.\") unless monitorId\n\n  Meteor.clearInterval(monitorId)\n  monitorId = null\n  lastActivityTime = undefined # If monitor started again, we shouldn't re-use this time\n  monitorDep.changed()\n\n  if idle # Un-set any idleness\n    idle = false\n    idleDep.changed()\n    # need to run this because the Deps below won't re-run when monitor is off\n    MonitorInternals.reportActive( Deps.nonreactive -> TimeSync.serverTime() )\n\n  return\n\nmonitor = (setAction) ->\n  # Ignore focus/blur events when we aren't monitoring\n  return unless monitorId\n\n  # We use setAction here to not have to call serverTime twice. Premature optimization?\n  currentTime = Deps.nonreactive -> TimeSync.serverTime()\n  # Can't monitor if we haven't synced with server yet, or lost our sync.\n  return unless currentTime?\n\n  # Update action as long as we're not blurred and idling on blur\n  # We ignore actions that happen while a client is blurred, if idleOnBlur is set.\n  if setAction and (focused or !MonitorInternals.idleOnBlur)\n    lastActivityTime = currentTime\n    activityDep.changed()\n\n  newIdle = MonitorInternals.computeState(lastActivityTime, currentTime, focused)\n\n  if newIdle isnt idle\n    idle = newIdle\n    idleDep.changed()\n  return\n\ntouch = ->\n  unless monitorId\n    Meteor._debug(\"Cannot touch as idle monitor is not running.\")\n    return\n  monitor(true) # Check for an idle state change right now\n\nisIdle = ->\n  idleDep.depend()\n  return idle\n\nisMonitoring = ->\n  monitorDep.depend()\n  return monitorId?\n\nlastActivity = ->\n  return unless isMonitoring()\n  activityDep.depend()\n  return lastActivityTime\n\nMeteor.startup ->\n  # Listen for mouse and keyboard events on window\n  # TODO other stuff - e.g. touch events?\n  $(window).on \"click keydown\", -> monitor(true)\n\n  # catch window blur events when requested and where supported\n  # We'll use jQuery here instead of window.blur so that other code can attach blur events:\n  # http://stackoverflow.com/q/22415296/586086\n  $(window).blur MonitorInternals.onWindowBlur\n  $(window).focus MonitorInternals.onWindowFocus\n\n  # Catch Cordova \"pause\" and \"resume\" events:\n  # https://github.com/mizzao/meteor-user-status/issues/47\n  if Meteor.isCordova\n    document.addEventListener \"pause\", MonitorInternals.onWindowBlur\n    document.addEventListener \"resume\", MonitorInternals.onWindowFocus\n\n  # First check initial state if window loaded while blurred\n  # Some browsers don't fire focus on load: http://stackoverflow.com/a/10325169/586086\n  focused = document.hasFocus()\n\n  # Report idle status whenever connection changes\n  Deps.autorun ->\n    # Don't report idle state unless we're monitoring\n    return unless isMonitoring()\n\n    # XXX These will buffer across a disconnection - do we want that?\n    # The idle report will result in a duplicate message (with below)\n    # The active report will result in a null op.\n    if isIdle()\n      MonitorInternals.reportIdle(lastActivityTime)\n    else\n      # If we were inactive, report that we are active again to the server\n      MonitorInternals.reportActive(lastActivityTime)\n    return\n\n  # If we reconnect and we were idle, make sure we send that upstream\n  wasConnected = Meteor.status().connected\n  Deps.autorun ->\n    connected = Meteor.status().connected\n    MonitorInternals.connectionChange(connected, wasConnected)\n\n    wasConnected = connected\n    return\n\n# export functions for starting and stopping idle monitor\nUserStatus = {\n  startMonitor: start\n  stopMonitor: stop\n  pingMonitor: touch\n  isIdle: isIdle\n  isMonitoring: isMonitoring\n  lastActivity: lastActivity\n}\n\n"]}