{"version":3,"sources":["yannvr:geolocation/geolocation.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,6C;;AAEA,sB;AACA,6B;AACA,kB;AACA,oB;AACA,E;;AAEA,uB;AACA,yB;;AAEA,6C;AACA,8C;AACA,+C;AACA,6D;AACA,C;;AAEA,qB;AACA,4D;AACA,C;;AAEA,e;AACA,4C;AACA,4C;AACA,uD;AACA,oC;AACA,0C;AACA,4B;AACA,a;AACA,mD;AACA,iB;AACA,iF;AACA,wB;AACA,wC;AACA,a;AACA,U;AACA,M;AACA,6C;AACA,iD;AACA,4C;AACA,6E;AACA,K;AACA,C;;AAEA,S;;AAEA,iB;AACA,6B;AACA,C;;AAEA,8B;AACA,mB;AACA,qE;AACA,wD;AACA,yD;AACA,4D;AACA,yD;AACA,4E;AACA,sD;AACA,+D;AACA,sB;AACA,mD;AACA,Y;AACA,8D;AACA,oB;AACA,K;AACA,C;;AAEA,uC;AACA,yB;AACA,oF;AACA,kG;;AAEA,kE;AACA,C","file":"/packages/yannvr_geolocation.js","sourcesContent":["var reactiveLocation = new ReactiveVar(null);\n\nvar defaultOptions = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 1000\n};\n\nfunction success(pos) {\n    var crd = pos.coords;\n\n    console.log('Your current position is:');\n    console.log('Latitude : ' + crd.latitude);\n    console.log('Longitude: ' + crd.longitude);\n    console.log('More or less ' + crd.accuracy + ' meters.');\n}\n\nfunction error(err) {\n    console.warn('ERROR(' + err.code + '): ' + err.message);\n}\n\nGeolocation = {\n    getCurrentPosition: function (options) {\n        options = options || defaultOptions;\n        return new Promise(function (resolve, reject) {\n            function success (pos) {\n                reactiveLocation.set(pos);\n                resolve(pos)\n            }\n            function error (error) { reject(error)}\n            try {\n                navigator.geolocation.getCurrentPosition(success, error, options)\n            } catch(e) {\n                window.location.reload()\n            }\n        })\n    },\n    reactiveLocation: reactiveLocation.get(),\n    watchPosition: function (callback, options) {\n        options = options || defaultOptions;\n        return navigator.geolocation.watchPosition(callback, error, options);\n    }\n}\n\n//Helpers\n\nfunction rad(x) {\n    return x * Math.PI / 180;\n}\n\nfunction getDistance(p1, p2) {\n    if (p1 && p2) {\n        Location.debug && console.log(\"Getting distance for\", p1, p2)\n        var R = 6378137; // Earthâ€™s mean radius in meter\n        var dLat = rad(p2.coords.latitude - p1.latitude);\n        var dLong = rad(p2.coords.longitude - p1.longitude);\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(rad(p1.latitude)) * Math.cos(rad(p2.coords.latitude)) *\n            Math.sin(dLong / 2) * Math.sin(dLong / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var d = R * c;\n        return d; // returns the distance in meters\n    } else {\n        // TODO: console log or throw error? Return what here?\n        return null;\n    }\n}\n\nfunction isSecondsAway(date, seconds) {\n    var now = new Date();\n    Location.debug && console.log(\"Time Calc: \" + (now.getTime() - date.getTime()));\n    Location.debug && console.log(seconds + \" Seconds: \" + (seconds * 1000) + ' In Milliseconds');\n\n    return !((now.getTime() - date.getTime()) <= (seconds * 1000))\n}\n"]}